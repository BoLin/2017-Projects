function [Y,Xf,Af] = HVAC_5(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 11-Sep-2017 16:43:32.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx3 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;57;71];
x1_step1.gain = [1.00818028806882;0.0714285714285714;0.25];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.6153935246408175;3.0765135414728126;-1.6216460110276265;-0.23399155037541755;0.59146423120116998;-0.38758089895283654;-0.060088224924754241;1.6285967485742718;-2.835548220787345;-2.830251863474325];
IW1_1 = [-2.6675760673296045 1.8378946252180206 -0.74875555057394427;-1.3193620846503413 -0.33190274896588223 2.0266372050445103;0.3731809526457725 3.7197466116404412 -0.057641116263829124;0.35866421807301768 0.60449981924768892 2.7893229567563265;-0.3434842500201391 0.69382859628362459 1.1606589905476583;-1.9596922653035673 -2.638441876383967 0.76631017311907623;-3.5257087321555365 2.1096606807260487 -1.6510292741072705;1.087465569719843 -0.31839465668672484 -2.7897472654610302;-2.5845322538954396 2.6798069098323438 -0.7539134963457953;-2.7545403392848651 -1.4460770641681098 0.23196827215793506];

% Layer 2
b2 = -0.41864340648004411;
LW2_1 = [0.28290478942060021 -0.071244255975305454 -0.10874609166489221 0.10785467355304705 0.88206846391726179 0.018847201814834354 0.17901073561502262 -0.25827981724847576 0.14643500833507123 0.096478093839626744];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.25;
y1_step1.xoffset = 71;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
