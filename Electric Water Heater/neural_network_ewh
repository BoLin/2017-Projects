function [Y,Xf,Af] = EWH_D1(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 24-Apr-2017 23:53:49.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 1xQ matrix, input #2 at timestep ts.
%
%   Xi = 2x1 cell 2, initial 1 input delay states.
%   Each Xi{1,ts} = 4xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 1xQ matrix, initial states for input #2.
%
%   Ai = 2x0 cell 2, initial 1 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 2x1 cell 2, final 1 input delay states.
%   Each Xf{1,ts} = 4xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 1xQ matrix, final states for input #2.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [7.63471826614481;0.00295875410451663;44.7295946283671;42.8884221513264];
x1_step1.gain = [0.000448842764605851;0.333835531237897;0.16088257778269;0.151405712964788];
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = 80;
x2_step1.gain = 0.0145241293442546;
x2_step1.ymin = -1;

% Layer 1
b1 = [-13.243989099864914;10.452343035162018;-5.7805198338010229;0.12980151920653415;-10.702827531785527;-4.5193569416316777;1.0081887490153467;-16.319152787373607;3.6259354711403935;-12.808230450416721];
IW1_1 = [-0.033157221674535456 -0.06252242449208964 0.18258833887237449 0.27209356606230345;-0.0082345690417251014 0.052333384094907946 -0.1696171437979847 -0.22343168804232602;-0.8764998538368427 0.0018533907230427124 0.15213837421690102 -0.047898135757268381;0.14776180721684543 -0.031371244667057555 0.0046254376499719422 -0.0030302535658741979;0.0048089449177099453 -0.046691423286991628 0.16903761680780011 0.22635393746251975;1.25274253384394 0.0026659678854393559 0.0081908345526674163 0.45474098317967421;4.8357251624522668 8.0535327470800375 0.83268486135826714 -0.74649800353287854;0.061332836727005978 -0.067478040622952262 0.27776795405146493 0.36563656407408485;4.7218015476357635 2.1285088399637595 -4.0335394332587802 3.0389218714036774;-8.152719702461841 3.0087601602995071 -0.74468756408517189 0.25666946666188672];
IW1_2 = [17.391134069390606;-15.228367166425661;6.4178264224192363;0.52525820433221571;14.723605078511476;7.6066672026320115;-10.334564898490713;22.811664681885663;2.6871085284369611;0.41360759545593068];

% Layer 2
b2 = 0.13306501857742012;
LW2_1 = [4.1393582413386447 -2.9175660885251324 0.23148696876354113 1.7723550035487519 -10.38432189079982 0.043753830024525986 -0.0028566671542653833 3.0598777926515424 0.010538478658496738 0.2784359605951186];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0145241293442546;
y1_step1.xoffset = 80;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,2);
for ts=1:1
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Input 2 Delay States
Xd2 = cell(1,2);
for ts=1:1
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+0,2)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-1-1,2)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-1-1,2)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
